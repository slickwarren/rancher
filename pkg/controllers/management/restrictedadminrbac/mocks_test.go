// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher/rancher/pkg/generated/controllers/management.cattle.io/v3 (interfaces: ClusterRoleTemplateBindingController,ClusterRoleTemplateBindingCache,ClusterCache,GlobalRoleBindingCache)

// Package restrictedadminrbac is a generated GoMock package.
package restrictedadminrbac

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	v30 "github.com/rancher/rancher/pkg/generated/controllers/management.cattle.io/v3"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// MockClusterRoleTemplateBindingController is a mock of ClusterRoleTemplateBindingController interface.
type MockClusterRoleTemplateBindingController struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRoleTemplateBindingControllerMockRecorder
}

// MockClusterRoleTemplateBindingControllerMockRecorder is the mock recorder for MockClusterRoleTemplateBindingController.
type MockClusterRoleTemplateBindingControllerMockRecorder struct {
	mock *MockClusterRoleTemplateBindingController
}

// NewMockClusterRoleTemplateBindingController creates a new mock instance.
func NewMockClusterRoleTemplateBindingController(ctrl *gomock.Controller) *MockClusterRoleTemplateBindingController {
	mock := &MockClusterRoleTemplateBindingController{ctrl: ctrl}
	mock.recorder = &MockClusterRoleTemplateBindingControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterRoleTemplateBindingController) EXPECT() *MockClusterRoleTemplateBindingControllerMockRecorder {
	return m.recorder
}

// AddGenericHandler mocks base method.
func (m *MockClusterRoleTemplateBindingController) AddGenericHandler(arg0 context.Context, arg1 string, arg2 generic.Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddGenericHandler", arg0, arg1, arg2)
}

// AddGenericHandler indicates an expected call of AddGenericHandler.
func (mr *MockClusterRoleTemplateBindingControllerMockRecorder) AddGenericHandler(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGenericHandler", reflect.TypeOf((*MockClusterRoleTemplateBindingController)(nil).AddGenericHandler), arg0, arg1, arg2)
}

// AddGenericRemoveHandler mocks base method.
func (m *MockClusterRoleTemplateBindingController) AddGenericRemoveHandler(arg0 context.Context, arg1 string, arg2 generic.Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddGenericRemoveHandler", arg0, arg1, arg2)
}

// AddGenericRemoveHandler indicates an expected call of AddGenericRemoveHandler.
func (mr *MockClusterRoleTemplateBindingControllerMockRecorder) AddGenericRemoveHandler(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGenericRemoveHandler", reflect.TypeOf((*MockClusterRoleTemplateBindingController)(nil).AddGenericRemoveHandler), arg0, arg1, arg2)
}

// Cache mocks base method.
func (m *MockClusterRoleTemplateBindingController) Cache() v30.ClusterRoleTemplateBindingCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cache")
	ret0, _ := ret[0].(v30.ClusterRoleTemplateBindingCache)
	return ret0
}

// Cache indicates an expected call of Cache.
func (mr *MockClusterRoleTemplateBindingControllerMockRecorder) Cache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cache", reflect.TypeOf((*MockClusterRoleTemplateBindingController)(nil).Cache))
}

// Create mocks base method.
func (m *MockClusterRoleTemplateBindingController) Create(arg0 *v3.ClusterRoleTemplateBinding) (*v3.ClusterRoleTemplateBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*v3.ClusterRoleTemplateBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockClusterRoleTemplateBindingControllerMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusterRoleTemplateBindingController)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockClusterRoleTemplateBindingController) Delete(arg0, arg1 string, arg2 *v1.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClusterRoleTemplateBindingControllerMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterRoleTemplateBindingController)(nil).Delete), arg0, arg1, arg2)
}

// Enqueue mocks base method.
func (m *MockClusterRoleTemplateBindingController) Enqueue(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Enqueue", arg0, arg1)
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockClusterRoleTemplateBindingControllerMockRecorder) Enqueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockClusterRoleTemplateBindingController)(nil).Enqueue), arg0, arg1)
}

// EnqueueAfter mocks base method.
func (m *MockClusterRoleTemplateBindingController) EnqueueAfter(arg0, arg1 string, arg2 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnqueueAfter", arg0, arg1, arg2)
}

// EnqueueAfter indicates an expected call of EnqueueAfter.
func (mr *MockClusterRoleTemplateBindingControllerMockRecorder) EnqueueAfter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueAfter", reflect.TypeOf((*MockClusterRoleTemplateBindingController)(nil).EnqueueAfter), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockClusterRoleTemplateBindingController) Get(arg0, arg1 string, arg2 v1.GetOptions) (*v3.ClusterRoleTemplateBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v3.ClusterRoleTemplateBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClusterRoleTemplateBindingControllerMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterRoleTemplateBindingController)(nil).Get), arg0, arg1, arg2)
}

// GroupVersionKind mocks base method.
func (m *MockClusterRoleTemplateBindingController) GroupVersionKind() schema.GroupVersionKind {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupVersionKind")
	ret0, _ := ret[0].(schema.GroupVersionKind)
	return ret0
}

// GroupVersionKind indicates an expected call of GroupVersionKind.
func (mr *MockClusterRoleTemplateBindingControllerMockRecorder) GroupVersionKind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupVersionKind", reflect.TypeOf((*MockClusterRoleTemplateBindingController)(nil).GroupVersionKind))
}

// Informer mocks base method.
func (m *MockClusterRoleTemplateBindingController) Informer() cache.SharedIndexInformer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Informer")
	ret0, _ := ret[0].(cache.SharedIndexInformer)
	return ret0
}

// Informer indicates an expected call of Informer.
func (mr *MockClusterRoleTemplateBindingControllerMockRecorder) Informer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Informer", reflect.TypeOf((*MockClusterRoleTemplateBindingController)(nil).Informer))
}

// List mocks base method.
func (m *MockClusterRoleTemplateBindingController) List(arg0 string, arg1 v1.ListOptions) (*v3.ClusterRoleTemplateBindingList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v3.ClusterRoleTemplateBindingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClusterRoleTemplateBindingControllerMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterRoleTemplateBindingController)(nil).List), arg0, arg1)
}

// OnChange mocks base method.
func (m *MockClusterRoleTemplateBindingController) OnChange(arg0 context.Context, arg1 string, arg2 v30.ClusterRoleTemplateBindingHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnChange", arg0, arg1, arg2)
}

// OnChange indicates an expected call of OnChange.
func (mr *MockClusterRoleTemplateBindingControllerMockRecorder) OnChange(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnChange", reflect.TypeOf((*MockClusterRoleTemplateBindingController)(nil).OnChange), arg0, arg1, arg2)
}

// OnRemove mocks base method.
func (m *MockClusterRoleTemplateBindingController) OnRemove(arg0 context.Context, arg1 string, arg2 v30.ClusterRoleTemplateBindingHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnRemove", arg0, arg1, arg2)
}

// OnRemove indicates an expected call of OnRemove.
func (mr *MockClusterRoleTemplateBindingControllerMockRecorder) OnRemove(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRemove", reflect.TypeOf((*MockClusterRoleTemplateBindingController)(nil).OnRemove), arg0, arg1, arg2)
}

// Patch mocks base method.
func (m *MockClusterRoleTemplateBindingController) Patch(arg0, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 ...string) (*v3.ClusterRoleTemplateBinding, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v3.ClusterRoleTemplateBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockClusterRoleTemplateBindingControllerMockRecorder) Patch(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockClusterRoleTemplateBindingController)(nil).Patch), varargs...)
}

// Update mocks base method.
func (m *MockClusterRoleTemplateBindingController) Update(arg0 *v3.ClusterRoleTemplateBinding) (*v3.ClusterRoleTemplateBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*v3.ClusterRoleTemplateBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockClusterRoleTemplateBindingControllerMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterRoleTemplateBindingController)(nil).Update), arg0)
}

// Updater mocks base method.
func (m *MockClusterRoleTemplateBindingController) Updater() generic.Updater {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updater")
	ret0, _ := ret[0].(generic.Updater)
	return ret0
}

// Updater indicates an expected call of Updater.
func (mr *MockClusterRoleTemplateBindingControllerMockRecorder) Updater() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updater", reflect.TypeOf((*MockClusterRoleTemplateBindingController)(nil).Updater))
}

// Watch mocks base method.
func (m *MockClusterRoleTemplateBindingController) Watch(arg0 string, arg1 v1.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockClusterRoleTemplateBindingControllerMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClusterRoleTemplateBindingController)(nil).Watch), arg0, arg1)
}

// MockClusterRoleTemplateBindingCache is a mock of ClusterRoleTemplateBindingCache interface.
type MockClusterRoleTemplateBindingCache struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRoleTemplateBindingCacheMockRecorder
}

// MockClusterRoleTemplateBindingCacheMockRecorder is the mock recorder for MockClusterRoleTemplateBindingCache.
type MockClusterRoleTemplateBindingCacheMockRecorder struct {
	mock *MockClusterRoleTemplateBindingCache
}

// NewMockClusterRoleTemplateBindingCache creates a new mock instance.
func NewMockClusterRoleTemplateBindingCache(ctrl *gomock.Controller) *MockClusterRoleTemplateBindingCache {
	mock := &MockClusterRoleTemplateBindingCache{ctrl: ctrl}
	mock.recorder = &MockClusterRoleTemplateBindingCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterRoleTemplateBindingCache) EXPECT() *MockClusterRoleTemplateBindingCacheMockRecorder {
	return m.recorder
}

// AddIndexer mocks base method.
func (m *MockClusterRoleTemplateBindingCache) AddIndexer(arg0 string, arg1 v30.ClusterRoleTemplateBindingIndexer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddIndexer", arg0, arg1)
}

// AddIndexer indicates an expected call of AddIndexer.
func (mr *MockClusterRoleTemplateBindingCacheMockRecorder) AddIndexer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIndexer", reflect.TypeOf((*MockClusterRoleTemplateBindingCache)(nil).AddIndexer), arg0, arg1)
}

// Get mocks base method.
func (m *MockClusterRoleTemplateBindingCache) Get(arg0, arg1 string) (*v3.ClusterRoleTemplateBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*v3.ClusterRoleTemplateBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClusterRoleTemplateBindingCacheMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterRoleTemplateBindingCache)(nil).Get), arg0, arg1)
}

// GetByIndex mocks base method.
func (m *MockClusterRoleTemplateBindingCache) GetByIndex(arg0, arg1 string) ([]*v3.ClusterRoleTemplateBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIndex", arg0, arg1)
	ret0, _ := ret[0].([]*v3.ClusterRoleTemplateBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIndex indicates an expected call of GetByIndex.
func (mr *MockClusterRoleTemplateBindingCacheMockRecorder) GetByIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIndex", reflect.TypeOf((*MockClusterRoleTemplateBindingCache)(nil).GetByIndex), arg0, arg1)
}

// List mocks base method.
func (m *MockClusterRoleTemplateBindingCache) List(arg0 string, arg1 labels.Selector) ([]*v3.ClusterRoleTemplateBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*v3.ClusterRoleTemplateBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClusterRoleTemplateBindingCacheMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterRoleTemplateBindingCache)(nil).List), arg0, arg1)
}

// MockClusterCache is a mock of ClusterCache interface.
type MockClusterCache struct {
	ctrl     *gomock.Controller
	recorder *MockClusterCacheMockRecorder
}

// MockClusterCacheMockRecorder is the mock recorder for MockClusterCache.
type MockClusterCacheMockRecorder struct {
	mock *MockClusterCache
}

// NewMockClusterCache creates a new mock instance.
func NewMockClusterCache(ctrl *gomock.Controller) *MockClusterCache {
	mock := &MockClusterCache{ctrl: ctrl}
	mock.recorder = &MockClusterCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterCache) EXPECT() *MockClusterCacheMockRecorder {
	return m.recorder
}

// AddIndexer mocks base method.
func (m *MockClusterCache) AddIndexer(arg0 string, arg1 v30.ClusterIndexer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddIndexer", arg0, arg1)
}

// AddIndexer indicates an expected call of AddIndexer.
func (mr *MockClusterCacheMockRecorder) AddIndexer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIndexer", reflect.TypeOf((*MockClusterCache)(nil).AddIndexer), arg0, arg1)
}

// Get mocks base method.
func (m *MockClusterCache) Get(arg0 string) (*v3.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v3.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClusterCacheMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterCache)(nil).Get), arg0)
}

// GetByIndex mocks base method.
func (m *MockClusterCache) GetByIndex(arg0, arg1 string) ([]*v3.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIndex", arg0, arg1)
	ret0, _ := ret[0].([]*v3.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIndex indicates an expected call of GetByIndex.
func (mr *MockClusterCacheMockRecorder) GetByIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIndex", reflect.TypeOf((*MockClusterCache)(nil).GetByIndex), arg0, arg1)
}

// List mocks base method.
func (m *MockClusterCache) List(arg0 labels.Selector) ([]*v3.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v3.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClusterCacheMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterCache)(nil).List), arg0)
}

// MockGlobalRoleBindingCache is a mock of GlobalRoleBindingCache interface.
type MockGlobalRoleBindingCache struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalRoleBindingCacheMockRecorder
}

// MockGlobalRoleBindingCacheMockRecorder is the mock recorder for MockGlobalRoleBindingCache.
type MockGlobalRoleBindingCacheMockRecorder struct {
	mock *MockGlobalRoleBindingCache
}

// NewMockGlobalRoleBindingCache creates a new mock instance.
func NewMockGlobalRoleBindingCache(ctrl *gomock.Controller) *MockGlobalRoleBindingCache {
	mock := &MockGlobalRoleBindingCache{ctrl: ctrl}
	mock.recorder = &MockGlobalRoleBindingCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalRoleBindingCache) EXPECT() *MockGlobalRoleBindingCacheMockRecorder {
	return m.recorder
}

// AddIndexer mocks base method.
func (m *MockGlobalRoleBindingCache) AddIndexer(arg0 string, arg1 v30.GlobalRoleBindingIndexer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddIndexer", arg0, arg1)
}

// AddIndexer indicates an expected call of AddIndexer.
func (mr *MockGlobalRoleBindingCacheMockRecorder) AddIndexer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIndexer", reflect.TypeOf((*MockGlobalRoleBindingCache)(nil).AddIndexer), arg0, arg1)
}

// Get mocks base method.
func (m *MockGlobalRoleBindingCache) Get(arg0 string) (*v3.GlobalRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v3.GlobalRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGlobalRoleBindingCacheMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGlobalRoleBindingCache)(nil).Get), arg0)
}

// GetByIndex mocks base method.
func (m *MockGlobalRoleBindingCache) GetByIndex(arg0, arg1 string) ([]*v3.GlobalRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIndex", arg0, arg1)
	ret0, _ := ret[0].([]*v3.GlobalRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIndex indicates an expected call of GetByIndex.
func (mr *MockGlobalRoleBindingCacheMockRecorder) GetByIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIndex", reflect.TypeOf((*MockGlobalRoleBindingCache)(nil).GetByIndex), arg0, arg1)
}

// List mocks base method.
func (m *MockGlobalRoleBindingCache) List(arg0 labels.Selector) ([]*v3.GlobalRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v3.GlobalRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockGlobalRoleBindingCacheMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGlobalRoleBindingCache)(nil).List), arg0)
}
