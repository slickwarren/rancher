// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher/rancher/pkg/generated/controllers/management.cattle.io/v3 (interfaces: ProjectCache)

// Package hostedcluster is a generated GoMock package.
package hostedcluster

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	v30 "github.com/rancher/rancher/pkg/generated/controllers/management.cattle.io/v3"
	labels "k8s.io/apimachinery/pkg/labels"
)

// MockProjectCache is a mock of ProjectCache interface.
type MockProjectCache struct {
	ctrl     *gomock.Controller
	recorder *MockProjectCacheMockRecorder
}

// MockProjectCacheMockRecorder is the mock recorder for MockProjectCache.
type MockProjectCacheMockRecorder struct {
	mock *MockProjectCache
}

// NewMockProjectCache creates a new mock instance.
func NewMockProjectCache(ctrl *gomock.Controller) *MockProjectCache {
	mock := &MockProjectCache{ctrl: ctrl}
	mock.recorder = &MockProjectCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectCache) EXPECT() *MockProjectCacheMockRecorder {
	return m.recorder
}

// AddIndexer mocks base method.
func (m *MockProjectCache) AddIndexer(arg0 string, arg1 v30.ProjectIndexer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddIndexer", arg0, arg1)
}

// AddIndexer indicates an expected call of AddIndexer.
func (mr *MockProjectCacheMockRecorder) AddIndexer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIndexer", reflect.TypeOf((*MockProjectCache)(nil).AddIndexer), arg0, arg1)
}

// Get mocks base method.
func (m *MockProjectCache) Get(arg0, arg1 string) (*v3.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*v3.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProjectCacheMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProjectCache)(nil).Get), arg0, arg1)
}

// GetByIndex mocks base method.
func (m *MockProjectCache) GetByIndex(arg0, arg1 string) ([]*v3.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIndex", arg0, arg1)
	ret0, _ := ret[0].([]*v3.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIndex indicates an expected call of GetByIndex.
func (mr *MockProjectCacheMockRecorder) GetByIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIndex", reflect.TypeOf((*MockProjectCache)(nil).GetByIndex), arg0, arg1)
}

// List mocks base method.
func (m *MockProjectCache) List(arg0 string, arg1 labels.Selector) ([]*v3.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*v3.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockProjectCacheMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProjectCache)(nil).List), arg0, arg1)
}
